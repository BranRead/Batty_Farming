[gd_scene load_steps=15 format=2]

[ext_resource path="res://Timer.gd" type="Script" id=1]
[ext_resource path="res://images/bat.png" type="Texture" id=2]
[ext_resource path="res://audio/Sword_Slash.wav" type="AudioStream" id=3]
[ext_resource path="res://DeathTimer.gd" type="Script" id=4]

[sub_resource type="GDScript" id=25]
resource_local_to_scene = true
script/source = "extends Area2D

var isAlive : bool = true
var guano_packed_scene = preload(\"Guano.tscn\")
export var idle_speed: float = 80
export var chasing_food_speed : float = 125
export var falling_speed = 50
var velocity = Vector2(0, 0)

export var lower_speed_threshold : float = 50
export var drop_threshold = 0.9993
var name_check : String = \"bat\";
export var timesFed : float = 0;
export var isHungry : bool = false
var bat_growth_level = 1
var cost: float = 1.00
var orginal_color = self.modulate
var closest_food
var animation_locked = false
export var movement_change_threshold : float = 0.99
var rng = RandomNumberGenerator.new()
onready var animated_sprite : AnimatedSprite = $AnimatedSprite
onready var eat_sound : AudioStreamPlayer = $EatSound
onready var gold_guano = load(\"res://images/goldenGuano.png\")

# Called when the node enters the scene tree for the first time.
func _ready():
	rng.randomize()

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if !animation_locked:
		animated_sprite.play(\"fly\")
	#print(\"flying\")
	if !self.isHungry && self.isAlive:
		var change_movement_chance : float = rng.randf()
		if change_movement_chance > movement_change_threshold:
			self.velocity.x = rng.randf_range(-self.idle_speed, self.idle_speed)
			#print(idle_speed.x)
			if self.velocity.x > -lower_speed_threshold && self.velocity.x <= 0:
				self.velocity.x -= lower_speed_threshold
			elif self.velocity.x < lower_speed_threshold && self.velocity.x > 0:
				self.velocity.x += lower_speed_threshold
			
			self.velocity.y = rng.randf_range(-self.idle_speed, self.idle_speed)
			if self.velocity.y > -lower_speed_threshold && self.velocity.y <= 0:
				self.velocity.y -= lower_speed_threshold
			elif self.velocity.y < lower_speed_threshold && self.velocity.y > 0:
				self.velocity.y += lower_speed_threshold
	elif self.isAlive:
		#print(\"Firing\")
		#print(get_parent().get_tree().get_nodes_in_group(\"food\"))
		var food_on_screen = get_parent().get_tree().get_nodes_in_group(\"food\")
		closest_food = null
		var closest_distance = 2000
		
		for food in food_on_screen:
			if food != null:
				var distance = self.position.distance_to(food.position)
				if distance < closest_distance:
					closest_food = food
		if closest_food != null:
			#print(closest_food.position)
			if self.position.x > self.position.move_toward(closest_food.position, self.chasing_food_speed * delta).x:
				animated_sprite.flip_h = false
			else:
				animated_sprite.flip_h = true
			self.position = self.position.move_toward(closest_food.position, self.chasing_food_speed * delta)
	else: 
		self.position.y += self.velocity.y * delta
	
	if !self.isHungry || self.closest_food == null: 
		self.position.x += self.velocity.x * delta
		self.position.y += self.velocity.y * delta
		if self.velocity.x > 0:
			animated_sprite.flip_h = true
		else: 
			animated_sprite.flip_h = false
	
	var dropChance = rng.randf_range(0,1)
	if dropChance > drop_threshold && self.isAlive:
		print(\"Bat level: \" + str(bat_growth_level))
		#print(\"Guano dropped\")
		var guano = guano_packed_scene.instance()
		var guano_unique = guano.duplicate()
		guano_unique.position = self.position
		if bat_growth_level == 3:
			guano_unique.get_child(0).play(\"golden\")
		get_parent().add_child(guano_unique)
	
func _on_Bat_area_entered(area):
	#if area.name_check == \"enemy\":
	#	self.free()
	if area.name_check == \"food\" && self.isHungry && self.isAlive:
		eat_sound.play()
		animated_sprite.play(\"eat\")
		animation_locked = true
		self.timesFed += area.growth_factor
		#print(\"The bat ate the strawberry\")
		
		$HungerTimer.wait_time = $HungerTimer.time_base * area.satiety_factor
		area.free()
		$HungerTimer.paused = false
		if !$DeathTimer.is_stopped():
			$DeathTimer.stop()
		self.isHungry = false
		self.modulate = self.orginal_color
		print(self.timesFed)
		if(self.timesFed >= 4 && self.bat_growth_level == 1):
			self.scale = Vector2(1.5, 1.5)
			self.bat_growth_level += 1
		if(self.timesFed >= 10 && self.bat_growth_level == 2):
			self.scale = Vector2(2, 2)
			self.bat_growth_level += 1
	elif area.name_check == \"bat\":
		print(\"FUNGUS\")
	elif area.name_check == \"leftScreen\" && isAlive:
		#print(\"Left wall\")
		self.velocity.x *= -1
	elif area.name_check == \"topScreen\":
		#print(\"Top wall\")
		self.velocity.y *= -1
	elif area.name_check == \"rightScreen\" && isAlive:
		#print(\"Right wall\")
		self.velocity.x *= -1
	elif area.name_check == \"bottomScreen\":
		print(self.isAlive)
		#print(\"Bottom wall\")
		if self.isAlive:
			self.velocity.y *= -1
		else: 
			print(\"Firing\")
			self.free()

func _on_Timer_timeout():
	print(\"I'm hungry :(\")
	$HungerTimer.paused = true
	self.isHungry = true
	self.modulate = Color(\"#c30010\")
	$DeathTimer.start()

func _on_DeathTimer_timeout():
	bat_death()

func bat_death():
	animated_sprite.play(\"death\")
	self.isAlive = false
	animation_locked = true
	self.velocity.x = 0
	self.velocity.y = self.falling_speed

func _on_AnimatedSprite_animation_finished():
	if [\"eat\"].has(animated_sprite.animation):
		animation_locked = false



"

[sub_resource type="AtlasTexture" id=29]
atlas = ExtResource( 2 )
region = Rect2( 0, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=26]
atlas = ExtResource( 2 )
region = Rect2( 512, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=27]
atlas = ExtResource( 2 )
region = Rect2( 640, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=28]
atlas = ExtResource( 2 )
region = Rect2( 768, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=15]
atlas = ExtResource( 2 )
region = Rect2( 128, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=16]
atlas = ExtResource( 2 )
region = Rect2( 256, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=17]
atlas = ExtResource( 2 )
region = Rect2( 384, 128, 128, 128 )

[sub_resource type="SpriteFrames" id=14]
animations = [ {
"frames": [ SubResource( 29 ) ],
"loop": true,
"name": "death",
"speed": 10.0
}, {
"frames": [ SubResource( 26 ), SubResource( 27 ), SubResource( 28 ) ],
"loop": true,
"name": "eat",
"speed": 10.0
}, {
"frames": [ SubResource( 15 ), SubResource( 16 ), SubResource( 17 ) ],
"loop": true,
"name": "fly",
"speed": 10.0
} ]

[sub_resource type="CapsuleShape2D" id=24]
radius = 13.0
height = 12.0

[node name="Bat" type="Area2D" groups=["Bat"]]
z_index = 1
collision_mask = 13
script = SubResource( 25 )
__meta__ = {
"_edit_group_": true
}

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
frames = SubResource( 14 )
animation = "death"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 3, 0 )
rotation = 1.5708
shape = SubResource( 24 )

[node name="HungerTimer" type="Timer" parent="."]
script = ExtResource( 1 )

[node name="EatSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 3 )

[node name="DeathTimer" type="Timer" parent="."]
script = ExtResource( 4 )

[connection signal="area_entered" from="." to="." method="_on_Bat_area_entered"]
[connection signal="animation_finished" from="AnimatedSprite" to="." method="_on_AnimatedSprite_animation_finished"]
[connection signal="timeout" from="HungerTimer" to="." method="_on_Timer_timeout"]
[connection signal="timeout" from="DeathTimer" to="." method="_on_DeathTimer_timeout"]
